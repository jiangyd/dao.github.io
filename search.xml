<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[chrome 控制台某请求没有显示响应内容]]></title>
    <url>%2F2018%2F09%2F26%2Fchrome-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9F%90%E8%AF%B7%E6%B1%82%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E5%93%8D%E5%BA%94%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[有一次开发调试问题时，发现某个A接口请求没有响应，而它下一个B接口请求又依赖这个A接口的返回内容，于是它认为是这个A接口有问题，把责任都往这个接口上推,因为这是它在chrome控制台看到的现象 目前我猜测可能是跨域了，而没有显示内容]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[头一次听说等宽字体，学到了]]></title>
    <url>%2F2018%2F09%2F26%2F%E5%A4%B4%E4%B8%80%E6%AC%A1%E5%90%AC%E8%AF%B4%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93%EF%BC%8C%E5%AD%A6%E5%88%B0%E4%BA%86%2F</url>
    <content type="text"><![CDATA[图片是从网上盗的，明白等宽字体是怎么回事就行了]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql select 语句的时候报错: ERROR 1267 (HY000): Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '=']]></title>
    <url>%2F2018%2F09%2F25%2Fmysql-select-%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%97%B6%E5%80%99%E6%8A%A5%E9%94%99-ERROR-1267-HY000-Illegal-mix-of-collations-latin1-swedish-ci-IMPLICIT-and-utf8-general-ci-COERCIBLE-for-operation%2F</url>
    <content type="text"><![CDATA[一个简单的sql查询语句竟然还报错 12345678910111213mysql&gt; insert into jj values (&apos;端口&apos;);Query OK, 1 row affected, 1 warning (0.02 sec)mysql&gt; select * from jj;+------+| name |+------+| ?? |+------+1 row in set (0.00 sec)mysql&gt; select * from jj where name=&apos;端口&apos;;ERROR 1267 (HY000): Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation &apos;=&apos; 以上错误是第一次见，但估计与字符编码有关系,查看表结构发现字段name的编码为latin1 123456789mysql&gt; show create table jj;+-------+----------------------------------------------------------------------------------------------+| Table | Create Table |+-------+----------------------------------------------------------------------------------------------+| jj | CREATE TABLE `jj` ( `name` varchar(20) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=latin1 |+-------+----------------------------------------------------------------------------------------------+1 row in set (0.00 sec) 我们把这个字段的编码改一改,这样编码一致问题就解决了 1234567891011121314151617mysql&gt; alter table jj change `name` `name` varchar(100) character set utf8 ;Query OK, 1 row affected (0.05 sec)Records: 1 Duplicates: 0 Warnings: 0mysql&gt; select * from jj where name=&apos;端口&apos;;Empty set (0.00 sec)mysql&gt; insert into jj values (&apos;端口&apos;);Query OK, 1 row affected (0.01 sec)mysql&gt; select * from jj where name=&apos;端口&apos;;+--------+| name |+--------+| 端口 |+--------+1 row in set (0.00 sec) 问题虽然解决了，但是为什么会出现此问题，我们先尝试创建一个新表，查看下字符编码,发现编码也是latin1，再次查看数据库(csos)的编码,应该不难发现源头就在这里 1234567891011121314151617181920mysql&gt; create table cc (name varchar(20));Query OK, 0 rows affected (0.02 sec)mysql&gt; show create table cc;+-------+----------------------------------------------------------------------------------------------+| Table | Create Table |+-------+----------------------------------------------------------------------------------------------+| cc | CREATE TABLE `cc` ( `name` varchar(20) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=latin1 |+-------+----------------------------------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; SHOW CREATE DATABASE csos;+----------+-----------------------------------------------------------------+| Database | Create Database |+----------+-----------------------------------------------------------------+| csos | CREATE DATABASE `csos` /*!40100 DEFAULT CHARACTER SET latin1 */ |+----------+-----------------------------------------------------------------+1 row in set (0.00 sec) 所以创建数据库的时候，应该指定需要的编码]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨域仅仅是错误表现之一]]></title>
    <url>%2F2018%2F09%2F14%2F%E8%B7%A8%E5%9F%9F%E4%BB%85%E4%BB%85%E6%98%AF%E9%94%99%E8%AF%AF%E8%A1%A8%E7%8E%B0%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[跨域,至于什么是跨越可以看浏览器的同源策略有一次测试环境中，有一个功能不正常，查看了下,是前端发出请求后端API的时候出现了跨域的现象,看到这的同学，性子急的马上就会嚷嚷着给开发爆跨域问题 502，通过nginx负载到后端服务器，后端服务器不可达就会出现502如果静下来继续往下看，可能就不是这么个原因,在chrome中查看网络请求，发现状态是502，也就是说这个后端API本身就是不通的，得先让这个后端API能够正常访问，才能再继续看看跨越问题是否存在 最后结果是，当后端API能够访问了，跨域问题也就是不存在了，因为后端API可以访问的话响应就会告诉浏览器此前端域名允许它跨域]]></content>
      <tags>
        <tag>跨域</tag>
        <tag>502</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim 批量在行首插入内容与删除内容]]></title>
    <url>%2F2018%2F09%2F06%2Fvim-%E6%89%B9%E9%87%8F%E5%9C%A8%E8%A1%8C%E9%A6%96%E6%8F%92%E5%85%A5%E5%86%85%E5%AE%B9%E4%B8%8E%E5%88%A0%E9%99%A4%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[批量在文件每行首字母中，插入内容 按上下键选中行 按大写的I,进入插入模式 输入需要添加的内容 按两下esc键,内容就增加好了 批量在文件每行首字母中，删除内容 按上下左右键选中行与列 按字母d,删除选中内容]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rm -rf 删除太多文件失败问题]]></title>
    <url>%2F2018%2F08%2F13%2Frm-rf-%E5%88%A0%E9%99%A4%E5%A4%AA%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[某目录下有10多万个小文件，rm 无法删除1234root@3ac80f67141a:/autotest/test/reports/allure-results# ls -l|wc -l136043root@3ac80f67141a:/autotest/test/reports/allure-results# rm -rf *bash: /bin/rm: Argument list too long 解决方法，文件一个一个删除,一定要注意当前路径12root@3ac80f67141a:~# cd /autotest/test/reports/allure-results/root@3ac80f67141a:/autotest/test/reports/allure-results# ls -l|awk &apos;&#123;print &quot;rm -rf &quot;,$9&#125;&apos;|sh]]></content>
      <tags>
        <tag>rm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx root 与 alias]]></title>
    <url>%2F2018%2F08%2F09%2Fnginx-root-%E4%B8%8E-alias%2F</url>
    <content type="text"><![CDATA[先看看nginx的配置文件123456789101112131415server &#123; listen 8090; server_name 192.168.56.102; location /root &#123; index index.html; root /home; &#125; location /alias &#123; index index.html; alias /home; &#125;&#125; 先访问 http://192.168.56.102/root 再试试访问 http://192.168.56.102/alias nginx 中在location中使用root，路径为 root定义的目录(/home)＋访问的目录(/root)+具体文件 在location中使用alias，路径为 root定义的目录(/home)+具体路径文件 假设我想通过/alias访问 /home/root/index.html这个文件我应该怎么做?]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>root</tag>
        <tag>alias</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过docker启动redis]]></title>
    <url>%2F2018%2F06%2F21%2F%E9%80%9A%E8%BF%87docker%E5%90%AF%E5%8A%A8redis%2F</url>
    <content type="text"><![CDATA[通过docker启动redis,并设置认证密码 1docker run --name some-redis -d redis --requirepass &quot;123456&quot; 12345678# redis-cli127.0.0.1:6379&gt; select 1(error) NOAUTH Authentication required.127.0.0.1:6379&gt; AUTH 123456OK127.0.0.1:6379&gt; select 1OK127.0.0.1:6379[1]&gt; 通过docker启动redis,并把数据挂载到宿主机磁盘 docker run –name my-redis -v /Users/jiangyd/myredis:/data -d redis-cli 123456789101112# redis-cli127.0.0.1:6379&gt; set name jydOK127.0.0.1:6379&gt; get name&quot;jyd&quot;127.0.0.1:6379&gt; select 1OK127.0.0.1:6379[1]&gt; set name ljOK127.0.0.1:6379[1]&gt; get name&quot;lj&quot;127.0.0.1:6379[1]&gt; exit 可以看的这个目录多了个文件 12345$ pwd/Users/jiangyd/myredisjiangyd:myredis jiangyd$ ls -ltotal 8-rw-r--r--@ 1 jiangyd staff 122 6 21 17:26 dump.rdb]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis默认16个数据库]]></title>
    <url>%2F2018%2F06%2F21%2Fredis%E9%BB%98%E8%AE%A416%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[redis默认16个数据库,通过索引访问,默认为0 默认使用的是0数据库 12# redis-cli127.0.0.1:6379&gt; 切换数据库1,可以看的到命令行提示多了个[1] 123127.0.0.1:6379&gt; select 1OK127.0.0.1:6379[1]&gt; 切换到数据库15,可以看的到命令行提示多了个[15] 123127.0.0.1:6379[1]&gt; select 15OK127.0.0.1:6379[15]&gt; 切换到不存在的数据库 12127.0.0.1:6379[15]&gt; select 16(error) ERR DB index is out of range 在数据库1创建的东西，并不会在其它数据库上显示 1234567891011127.0.0.1:6379[15]&gt; select 1OK127.0.0.1:6379[1]&gt; set name jydOK127.0.0.1:6379[1]&gt; get name&quot;jyd&quot;127.0.0.1:6379[1]&gt; select 15OK127.0.0.1:6379[15]&gt; get name(nil)127.0.0.1:6379[15]&gt;]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次crontab未生效原因]]></title>
    <url>%2F2018%2F06%2F20%2F%E8%AE%B0%E4%B8%80%E6%AC%A1crontab%E6%9C%AA%E7%94%9F%E6%95%88%E5%8E%9F%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[我有一个定时任务没有生效，看下我的定时任务脚本,当前用户是root 123# cd /var/spool/cron/# cat root */1 * * * * sh /var/spool/cron/test.sh 检测脚本文件是否存在 12# ls /var/spool/cron/test.sh/var/spool/cron/test.sh 检测脚本文件内容及是否能够执行 123456789# cat test.sh #!/bin/bashecho &quot;a&quot; &gt;&gt;b.txt# sh /var/spool/cron/test.sh# lsb.txt root test.sh[root@centos-7 cron]# cat b.txt a 检测crond服务是否运行中 123456789# service crond statusRedirecting to /bin/systemctl status crond.service● crond.service - Command Scheduler Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2018-03-22 20:44:34 CST; 2 months 28 days ago Main PID: 558 (crond) Memory: 2.3M CGroup: /system.slice/crond.service └─558 /usr/sbin/crond -n 检测一下crontab的日志,说明是有执行的 123456789101112]# tailf /var/log/cronJun 20 07:00:01 centos-7 CROND[31232]: (root) CMD (/usr/lib64/sa/sa1 1 1)Jun 20 07:00:01 centos-7 CROND[31231]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:01:01 centos-7 CROND[31252]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:01:01 centos-7 CROND[31253]: (root) CMD (run-parts /etc/cron.hourly)Jun 20 07:01:01 centos-7 run-parts(/etc/cron.hourly)[31253]: starting 0anacronJun 20 07:01:01 centos-7 run-parts(/etc/cron.hourly)[31263]: finished 0anacronJun 20 07:02:01 centos-7 CROND[31307]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:03:01 centos-7 CROND[31367]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:04:01 centos-7 CROND[31401]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:05:01 centos-7 CROND[31406]: (root) CMD (sh /var/spool/cron/test.sh)Jun 20 07:06:01 centos-7 CROND[31426]: (root) CMD (sh /var/spool/cron/test.sh) 这样定位肯定是脚本文件有问题了,把b.txt的路径改成绝对路径 123456# cat test.sh #!/bin/bashecho &quot;a&quot; &gt;&gt;/root/b.txt# cat /root/b.txta 果然可以执行了]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[/etc/resolv.conf配置自定义DNS,系统重启失效问题]]></title>
    <url>%2F2018%2F06%2F15%2Fetc-resolv-conf%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89DNS-%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AF%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在/etc/resolv.conf设置dns，但是系统重启后会被清空（我的系统ubuntu:14.04） 这个文件的开头也说了，不要编辑这个文件，更改会被覆盖的其中 192.168.0.244 是我搭建的dns,必须放在第一行202.96.209.133 202.96.209.5 是自动获取的dns 123456# cat /etc/resolv.conf# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTENnameserver 192.168.0.244nameserver 202.96.209.133nameserver 202.96.209.5 修改/etc/resolvconf/resolv.conf.d/head文件，可以保留设置修改/etc/resolvconf/resolv.conf.d/base文件，可以保留设置修改/etc/resolvconf/resolv.conf.d/tail文件，可以保留设置 这3个文件有什么区别head文件设置的dns放在/etc/resolv.conf最前面base文件设置的dns放在head与tail中间,但是该文件只能设置一个dnstail文件设置的dns放在/etc/resolv.conf最后面 基于我的需要，dns必须设置为第一个,那么我们需要修改的文件如下 12# cat /etc/resolvconf/resolv.conf.d/headnameserver 192.168.0.244 最后重启 1service resolvconf restart 如果想去掉动态的DNS，只保留自己定义的DNS,那么就要设置静态的DNS了 方法1: 12# vim /etc/dhcp/dhclient.confsupersede domain-name-servers 192.168.0.244; 方法2: 1234# vim /etc/network/interfacesauto eth0iface eth0 inet dhcpdns-nameservers 192.168.0.244 其它系统配置文件及路径可能不同，配置如果没有生效，建议重启系统]]></content>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我被chrome非安全端口搞的一脸懵逼]]></title>
    <url>%2F2018%2F06%2F06%2F%E6%88%91%E8%A2%ABchrome%E9%9D%9E%E5%AE%89%E5%85%A8%E7%AB%AF%E5%8F%A3%E6%90%9E%E7%9A%84%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC%2F</url>
    <content type="text"><![CDATA[我有一个应用监听的端口是6666 1234# netstat -lntpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:6666 0.0.0.0:* LISTEN 55/java 测试端口响应也是正确的 1234$ telnet 10.100.3.195 6666Trying 10.100.3.195...Connected to 10.100.3.195.Escape character is &apos;^]&apos;. 但是我用chrome一直访问不了 我把端口换成6662就是正确的，但是6666为什么就是不行了，清缓存，再试，没用 于是我网上查了下 ERR_UNSAFE_PORT 6666，才发现chrome有非安全端口的限制 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263641, // tcpmux 7, // echo 9, // discard 11, // systat 13, // daytime 15, // netstat 17, // qotd 19, // chargen 20, // ftp data 21, // ftp access 22, // ssh 23, // telnet 25, // smtp 37, // time 42, // name 43, // nicname 53, // domain 77, // priv-rjs 79, // finger 87, // ttylink 95, // supdup 101, // hostriame 102, // iso-tsap 103, // gppitnp 104, // acr-nema 109, // pop2 110, // pop3 111, // sunrpc 113, // auth 115, // sftp 117, // uucp-path 119, // nntp 123, // NTP 135, // loc-srv /epmap 139, // netbios 143, // imap2 179, // BGP 389, // ldap 465, // smtp+ssl 512, // print / exec 513, // login 514, // shell 515, // printer 526, // tempo 530, // courier 531, // chat 532, // netnews 540, // uucp 556, // remotefs 563, // nntp+ssl 587, // stmp? 601, // ?? 636, // ldap+ssl 993, // ldap+ssl 995, // pop3+ssl 2049, // nfs 3659, // apple-sasl / PasswordServer 4045, // lockd 6000, // X11 6665, // Alternate IRC [Apple addition] 6666, // Alternate IRC [Apple addition] 6667, // Standard IRC [Apple addition] 6668, // Alternate IRC [Apple addition] 6669, // Alternate IRC [Apple addition]]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker build镜像，运行镜像出现问题]]></title>
    <url>%2F2018%2F06%2F06%2Fdocker-build%E9%95%9C%E5%83%8F%EF%BC%8C%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[我的系统环境是mac ,docker环境如下 1234567891011121314151617181920$ docker versionClient: Version: 18.03.0-ce API version: 1.37 Go version: go1.9.4 Git commit: 0520e24 Built: Wed Mar 21 23:06:22 2018 OS/Arch: darwin/amd64 Experimental: false Orchestrator: swarmServer: Engine: Version: 18.03.0-ce API version: 1.37 (minimum version 1.12) Go version: go1.9.4 Git commit: 0520e24 Built: Wed Mar 21 23:14:32 2018 OS/Arch: linux/amd64 Experimental: true docker build镜像，运行镜像出现问题 （为什么会出现这个问题，估计是我的空间满了，然后我删除了很多镜像，容器，不知道什么情况下就引起了这个问题） 123456$ docker build -t ubuntu:test . --no-cacheSending build context to Docker daemon 189.5MBStep 1/16 : FROM ubuntu:16.04 ---&gt; f975c5035748Step 2/16 : RUN apt-get updateerror creating overlay mount to /var/lib/docker/overlay2/8861e6916ec6a1d012e9b1c2f73107f5e28e552da5f367d2ae02d0a359aa5c71-init/merged: no such file or directory 报错说没有文件或目录，我查看了下，/var/lib／docker这个目录是不存在的 在github上找到了解决办法，但是这个解决办法是不太理想的，因为我的镜像容器通通被删除了 https://github.com/docker/for-mac/issues/1396 解决办法: #通过screen命令进入docker虚拟机Screen into the Docker VM #取消挂载，然后删除/var/lib/dockerRemove /var/lib/docker #最后重启dockerRestart Docker via the widget 123$ screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty$ umount /var/lib/docker/overlay2$ rm -rf /var/lib/docker]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置https简单实例]]></title>
    <url>%2F2018%2F05%2F31%2Fnginx%E9%85%8D%E7%BD%AEhttps%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[首先需要有域名，正好我有个域名testwd.cn 给域名申请证书，可以找个免费的https://freessl.org/，也可以找个花钱的 阿里云ecs一台,需要有公网ip 首先给域名申请证书 把验证信息添加到DNS服务商解析记录 验证通过后，下载证书 nginx配置 把证书内容拷贝到/home/testwd.cn.crt;把私钥内容拷贝到/home/testwd.cn.key 123456789101112131415# cat /etc/nginx/conf.d/test.conf server &#123; listen 443 ssl; ssl on; server_name web.testwd.cn; index index.html; root /home/dist/; ssl_certificate /home/testwd.cn.crt; ssl_certificate_key /home/testwd.cn.key; &#125; 查看本ecs实例公网ip 12# curl ip.sb47.96.86.120 配置DNS域名解析到ip 重新启动nginx 12# /etc/init.d/nginx restart[ ok ] Restarting nginx (via systemctl): nginx.service. 查看是否监听443端口 1234567# netstat -lntpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 836/sshd tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 17588/nginx -g daemtcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 17588/nginx -g daemtcp6 0 0 :::80 :::* LISTEN 17588/nginx -g daem 验证通过https访问]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>ssl</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建postfix邮件服务器]]></title>
    <url>%2F2018%2F05%2F29%2F%E6%90%AD%E5%BB%BApostfix%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[设置主机名为test.cn 1$ sudo vim /etc/hostname 查看主机名设置是否生效 12$ hostnametest.cn 更新及安装 12$ sudo apt-get update$ sudo apt-get install postfix 安装完成后监听端口 1234$ netstat -lntp|grep 25(No info could be read for &quot;-p&quot;: geteuid()=1000 but you should be root.)tcp 0 0 0.0.0.0:25 0.0.0.0:* LISTEN -tcp6 0 0 :::25 :::* LISTEN - 安装mail测试下 12$ sudo apt-get install mailutils$ echo &quot;this is a test email&quot; |mail &quot;962584902@qq.com&quot; 看看日志是否正常 1234567$ tailf /var/log/mail.logMay 29 14:14:32 test postfix/pickup[2416]: E275A601B5: uid=1000 from=&lt;jiangyd@test.cn&gt;May 29 14:14:32 test postfix/cleanup[2938]: E275A601B5: message-id=&lt;20180529061432.E275A601B5@test.cn&gt;May 29 14:14:32 test postfix/qmgr[2417]: E275A601B5: from=&lt;jiangyd@test.cn&gt;, size=320, nrcpt=1 (queue active)May 29 14:14:33 test postfix/smtp[2940]: connect to mx3.qq.com[240e:ff:f040:28::f]:25: Network is unreachableMay 29 14:14:34 test postfix/smtp[2940]: E275A601B5: to=&lt;962584902@qq.com&gt;, relay=mx3.qq.com[183.57.48.35]:25, delay=1.4, delays=0.02/0.01/0.17/1.2, dsn=2.0.0, status=sent (250 Ok: queued as )May 29 14:14:34 test postfix/qmgr[2417]: E275A601B5: removed 去qq邮箱看看 试试其它机器，连接邮件服务器来发邮件，并用python实现 其它机器要能访问test.cn这个地址，可以本地绑定host python脚本 12345678910111213141516171819# coding=utf-8__author__ = &apos;jyd&apos;import smtplibfrom email.mime.text import MIMETextsmtpserver = &quot;test.cn&quot;username = &quot;jiangyd@test.cn&quot;msg = MIMEText(&quot;你好，这是一封测试邮件&quot;)msg[&apos;subject&apos;] = &quot;测试邮件&quot;msg[&apos;From&apos;] = &quot;jiangyd@test.cn&quot;msg[&apos;To&apos;] = &quot;962584902@qq.com&quot;smtp = smtplib.SMTP()smtp.connect(smtpserver)smtp.sendmail(msg[&apos;From&apos;], msg[&apos;To&apos;], msg.as_string())smtp.quit() 运行以上脚本报错了 12 raise SMTPRecipientsRefused(senderrs)smtplib.SMTPRecipientsRefused: &#123;&apos;962584902@qq.com&apos;: (454, b&apos;4.7.1 &lt;962584902@qq.com&gt;: Relay access denied&apos;)&#125; 看看日志，发现是访问被拒绝了,不允许这个192.168.56.112345$ tailf /var/log/mail.logMay 29 14:26:33 test postfix/smtpd[3171]: connect from unknown[192.168.56.1]May 29 14:26:33 test postfix/smtpd[3171]: NOQUEUE: reject: RCPT from unknown[192.168.56.1]: 454 4.7.1 &lt;962584902@qq.com&gt;: Relay access denied; from=&lt;jiangyd@test.cn&gt; to=&lt;962584902@qq.com&gt; proto=ESMTP helo=&lt;jiangyd.local&gt;May 29 14:26:33 test postfix/smtpd[3171]: lost connection after RSET from unknown[192.168.56.1]May 29 14:26:33 test postfix/smtpd[3171]: disconnect from unknown[192.168.56.1] 更改设置 增加可信客户端网段192.168.56.0/24,也可是增加万能的0.0.0.0/0 12$ sudo vim /etc/postfix/main.cfmynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 192.168.56.0/24 更改后需要重启1234$ sudo /etc/init.d/postfix restartsudo: unable to resolve host test.cn * Stopping Postfix Mail Transport Agent postfix [ OK ] * Starting Postfix Mail Transport Agent postfix [ OK ] 再次验证]]></content>
      <tags>
        <tag>postfix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql创建数据库,用户,及授权]]></title>
    <url>%2F2018%2F05%2F28%2Fmysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%94%A8%E6%88%B7-%E5%8F%8A%E6%8E%88%E6%9D%83%2F</url>
    <content type="text"><![CDATA[创建数据库,注意数据库加上反撇号,不然有些带横杠的会被认为是减号，如test-de会创建不成功 加上反撇号的还有一层用意,使用mysql中的关键字命名不会报错 1234567mysql&gt; create database create;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;create&apos; at line 1mysql&gt; create database crtest;Query OK, 1 row affected (0.00 sec)mysql&gt; create database `create`;Query OK, 1 row affected (0.00 sec) 12mysql&gt; create database `testdb` default character set utf8 default collate utf8_general_ci;Query OK, 1 row affected (0.00 sec) 创建用户 12mysql&gt; create user &apos;jyd&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;Query OK, 0 rows affected (0.04 sec) 给用户授权 12mysql&gt; GRANT ALL PRIVILEGES ON testdb.* to &apos;jyd&apos;@&apos;%&apos;;Query OK, 0 rows affected, 1 warning (0.00 sec) 给某数据库设置只读权限（message_bb） 12mysql&gt; GRANT SELECT ON message_bb.* to &apos;jyd&apos;@&apos;%&apos;;Query OK, 0 rows affected (0.00 sec) 刷新权限 12mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 更改用户密码 12mysql&gt; SET PASSWORD FOR &apos;jyd&apos;@&apos;%&apos; = PASSWORD(&apos;new123456&apos;);Query OK, 0 rows affected, 1 warning (0.00 sec)]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux普通用户增加sudo权限]]></title>
    <url>%2F2018%2F05%2F26%2Flinux%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%A2%9E%E5%8A%A0sudo%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[普通用户执行sudo没有权限 1234$ sudo apt-get updatesudo: unable to resolve host dest1[sudo] password for test: test is not in the sudoers file. This incident will be reported. 解决办法: 切换到超管用户编辑vim /etc/sudoers,把用户增加进去 123# User privilege specificationroot ALL=(ALL:ALL) ALLtest ALL=(ALL:ALL) ALL 编辑完成后，退出时需要增加!,使用:wq!退出，因为是只读文件]]></content>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次selenium 一打开浏览器就自动关闭了的问题]]></title>
    <url>%2F2018%2F05%2F23%2F%E8%AE%B0%E4%B8%80%E6%AC%A1selenium-%E4%B8%80%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B0%B1%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E4%BA%86%E7%9A%84%E9%97%AE%E9%A2%98-Only-local-connections-are-allowed%2F</url>
    <content type="text"><![CDATA[selenium无法打开浏览器运行 1.chromedriver 版本与浏览器不匹配2.如果是在本地调用， localhost需要指向127.0.0.1这个IP，不然也跑不起来(其实只是要host能指向正确的selenium driver的地址就行) https://npm.taobao.org/mirrors/chromedriver https://npm.taobao.org/mirrors/selenium]]></content>
      <tags>
        <tag>selenium</tag>
        <tag>chromedriver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设置mysql最大连接数]]></title>
    <url>%2F2018%2F05%2F21%2F%E8%AE%BE%E7%BD%AEmysql%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0%2F</url>
    <content type="text"><![CDATA[为什么要修改连接数，是因为默认的连接不满足需求，在硬件条件允许下，修改最大连接数达到满足需求的目的 查看当前mysql最大连接数 1234567mysql&gt; show variables like &apos;max_connections&apos;;+-----------------+-------+| Variable_name | Value |+-----------------+-------+| max_connections | 1000 |+-----------------+-------+1 row in set (0.31 sec) 修改当前mysql最大连接数 1mysql&gt; set global max_connections=1000; 但是以上的修改方式，在mysql服务重启后会失效 查看当前mysql连接 123456789101112131415161718192021222324252627mysql&gt; SHOW PROCESSLIST;+-----+------+------------------+------+---------+------+----------+------------------+| Id | User | Host | db | Command | Time | State | Info |+-----+------+------------------+------+---------+------+----------+------------------+| 66 | root | localhost | NULL | Query | 0 | starting | SHOW PROCESSLIST || 331 | root | 172.17.0.1:54084 | csos | Sleep | 9 | | NULL || 332 | root | 172.17.0.1:54086 | csos | Sleep | 8 | | NULL || 333 | root | 172.17.0.1:54090 | csos | Sleep | 9 | | NULL || 334 | root | 172.17.0.1:54098 | csos | Sleep | 9 | | NULL || 335 | root | 172.17.0.1:54096 | csos | Sleep | 9 | | NULL || 336 | root | 172.17.0.1:54092 | csos | Sleep | 8 | | NULL || 337 | root | 172.17.0.1:54088 | csos | Sleep | 9 | | NULL || 338 | root | 172.17.0.1:54094 | csos | Sleep | 9 | | NULL || 339 | root | 172.17.0.1:54100 | csos | Sleep | 9 | | NULL || 340 | root | 172.17.0.1:54116 | csos | Sleep | 8 | | NULL || 341 | root | 172.17.0.1:54104 | csos | Sleep | 8 | | NULL || 342 | root | 172.17.0.1:54120 | csos | Sleep | 9 | | NULL || 343 | root | 172.17.0.1:54106 | csos | Sleep | 9 | | NULL || 344 | root | 172.17.0.1:54122 | csos | Sleep | 8 | | NULL || 345 | root | 172.17.0.1:54108 | csos | Sleep | 8 | | NULL || 346 | root | 172.17.0.1:54110 | csos | Sleep | 8 | | NULL || 347 | root | 172.17.0.1:54112 | csos | Sleep | 9 | | NULL || 348 | root | 172.17.0.1:54102 | csos | Sleep | 8 | | NULL || 349 | root | 172.17.0.1:54114 | csos | Sleep | 8 | | NULL || 350 | root | 172.17.0.1:54118 | csos | Sleep | 8 | | NULL |+-----+------+------------------+------+---------+------+----------+------------------+21 rows in set (0.00 sec) 如果查看连接数需要过滤的话，可以如下操作 12345678mysql&gt; select * from information_schema.PROCESSLIST where db=&apos;csos&apos;;+-----+------+------------------+------+---------+------+-------+------+| ID | USER | HOST | DB | COMMAND | TIME | STATE | INFO |+-----+------+------------------+------+---------+------+-------+------+| 354 | root | 172.17.0.1:54130 | csos | Sleep | 4 | | NULL || 355 | root | 172.17.0.1:54132 | csos | Sleep | 4 | | NULL |+-----+------+------------------+------+---------+------+-------+------+2 rows in set (0.00 sec)]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间不对，通过ntpdate同步时间]]></title>
    <url>%2F2018%2F05%2F21%2F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%EF%BC%8C%E9%80%9A%E8%BF%87ntpdate%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[我有一台虚拟机，时间不对，影响我使用,使用阿里云公网NTP服务同步时间 12# ntpdate ntp1.aliyun.com21 May 12:50:42 ntpdate[6794]: step time server 182.92.12.11 offset 0.548418 sec 其它阿里云公网NTP时间服务器 公网NTP ntp2.aliyun.comntp3.aliyun.comntp4.aliyun.comntp5.aliyun.comntp6.aliyun.comntp7.aliyun.com]]></content>
      <tags>
        <tag>时间同步</tag>
        <tag>ntpdate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过ssh config配置, 使git用不同私钥提交代码]]></title>
    <url>%2F2018%2F05%2F15%2F%E9%80%9A%E8%BF%87ssh-config%E9%85%8D%E7%BD%AE-%E4%BD%BFgit%E7%94%A8%E4%B8%8D%E5%90%8C%E7%A7%81%E9%92%A5%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[我有在用hexo部署blog在github上，本地构建完成后，直接可以把编译后的文件部署上去 但是，我希望源文件也可以存放在github上，所以我又搞了一个仓库地址 但是在当前目录提交代码时，只能提交一个，另一个提交不了，因为默认使用的私钥文件不对 为了区分开来，我只能配置不同的私钥文件,可以参考下我的配置文件 123456789101112131415$ touch ~/.ssh/config$ vim ~/.ssh/configHOST server1 HOSTNAME 192.168.56.102 User jiangyd Port 3333HOST gitblog.com HOSTNAME github.com IdentityFile ~/.ssh/id_rsaHOST github.com HOSTNAME github.com IdentityFile ~/.ssh/github.com 参数 说明 HOST 别名 HOSTNAME 主机 User 用户名 Port 端口 IdentityFile 私钥文件 连接例子 12$ ssh server1jiangyd@192.168.56.102&apos;s password: 我的hexo _config.yml github仓库配置，注意这里用别名 1234deploy: type: git repo: git@gitblog.com:jiangyd/jiangyd.github.io branch: master 这样我就可以在hexo blog项目里面，即可以提交源代码到Github，又可以提交构建部署的代码到Github因为部署的github与源代码仓库地址不是一个 以上的配置都是太过复杂，为什么会出现这种情况，是因为我把自已电脑的公钥存放到Github项目里面了，而不同项目又不能存放同一个公钥，所以才会有我上面的这些设置 那么只要把公钥在Github上面做全局的设置，那么我本地就不用搞这么复杂了]]></content>
      <tags>
        <tag>ssh</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[容器与宿主机时区不一致问题]]></title>
    <url>%2F2018%2F05%2F09%2F%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[docker 容器时区与宿主机时区保持一致 方法1 共享宿主机的local time 1docker run -it -v /etc/localtime:/etc/localtime -v /etc/timezone:/etc/timezone ubuntu:16.04 /bin/bash 方法2 在dockerfile中定义 1234567RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \ &amp;&amp; echo &apos;Asia/Shanghai&apos; &gt;/etc/timezone \或者RUN /bin/cp /etc/localtime /etc/localtime \ &amp;&amp; echo &apos;Asia/Shanghai&apos; &gt;/etc/timezone \]]></content>
      <tags>
        <tag>docker</tag>
        <tag>挂载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu apt使用阿里源]]></title>
    <url>%2F2018%2F05%2F09%2Fubuntu-apt%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E6%BA%90%2F</url>
    <content type="text"><![CDATA[ubuntu 14.04使用阿里的软件源 备份 1# cp /etc/apt/sources.list /etc/apt/sources.list.bak 替换 12345678910111213141516cat &gt;/etc/apt/sources.list&lt;&lt;EOFdeb https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse## Not recommended# deb https://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse# deb-src https://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverseEOF 最后执行apt更新 1# apt-get update 其它系统参考此地址 https://opsx.alibaba.com/mirror]]></content>
      <tags>
        <tag>apt</tag>
        <tag>apt-get</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下使用sed替换dns地址]]></title>
    <url>%2F2018%2F05%2F09%2FLinux%E4%B8%8B%E4%BD%BF%E7%94%A8sed%E6%9B%BF%E6%8D%A2dns%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[sed替换/etc/resolv.conf文件的dns地址123456789# cat /etc/resolv.confnameserver 114.114.114.114nameserver 8.8.8.8# sed -i &apos;s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/172.16.0.244/g&apos; /etc/resolv.conf# cat /etc/resolv.confnameserver 172.16.0.244nameserver 172.16.0.244]]></content>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu使用bind9搭建DNS]]></title>
    <url>%2F2018%2F05%2F07%2Fubuntu%E4%BD%BF%E7%94%A8bind9%E6%90%AD%E5%BB%BADNS%2F</url>
    <content type="text"><![CDATA[安装bind912$ sudo apt-get update$ sudo apt-get install bind9 默认配置文件路径12$ pwd/etc/bind 添加域名正反向解析配置1234567891011121314151617$ sudo vim named.conf.default-zoneszone &quot;jiangyd.cn&quot; &#123; type master; file &quot;/etc/bind/db.jiangyd.cn&quot;;&#125;;zone &quot;56.168.192.in-addr.arpa&quot; &#123; type master; file &quot;/etc/bind/192.168.56.zone&quot;;&#125;;zone &quot;ipad.jiangyd.com.cn&quot; &#123; type master; file &quot;/etc/bind/ipad.jiangyd.com.cn&quot;;&#125;; 正向解析 12345678910111213141516171819# cat db.jiangyd.cn;; BIND data file for local loopback interface;$TTL 604800@ IN SOA jiangyd.cn. root.localhost. ( 2 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 604800 ) ; Negative Cache TTL;@ IN NS jiangyd.cn.@ IN A 127.0.0.1@ IN AAAA ::1www IN A 192.168.56.102bbs IN A 192.168.56.102music IN A 192.168.56.1 反向解析 12345678910111213141516# cat 192.168.56.zone;; BIND reverse data file for local loopback interface;$TTL 604800@ IN SOA jiangyd.cn. root.localhost. ( 1 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 604800 ) ; Negative Cache TTL;@ IN NS jiangyd.cn.102 IN PTR www.jiangyd.cn.102 IN PTR bbs.jiangyd.cn.1 IN PTR music.jiangyd.cn. 有的应用需要为不同用户分配不同域名，试试泛解析 1234567891011121314151617181920# cat ipad.jiangyd.com.cn;; BIND data file for local loopback interface;$TTL 604800@ IN SOA ipad.jiangyd.com.cn. root.localhost. ( 2 ; Serial 604800 ; Refresh 86400 ; Retry 2419200 ; Expire 604800 ) ; Negative Cache TTL;@ IN NS ipad.jiangyd.com.cn.@ IN A 127.0.0.1@ IN AAAA ::1www IN A 192.168.56.1bbs IN A 192.168.56.102* IN A 192.168.56.1 正反向解析测试 12345678910111213141516171819202122232425262728293031root@jiangydpc:/etc/bind# ping www.jiangyd.cnPING www.jiangyd.cn (192.168.56.102) 56(84) bytes of data.64 bytes from dns.jiangyd.cn (192.168.56.102): icmp_seq=1 ttl=64 time=0.069 ms64 bytes from dns.jiangyd.cn (192.168.56.102): icmp_seq=2 ttl=64 time=0.026 ms^C--- www.jiangyd.cn ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 999msrtt min/avg/max/mdev = 0.026/0.047/0.069/0.022 msroot@jiangydpc:/etc/bind# ping bbs.jiangyd.cnPING bbs.jiangyd.cn (192.168.56.102) 56(84) bytes of data.64 bytes from www.jiangyd.cn (192.168.56.102): icmp_seq=1 ttl=64 time=0.010 ms64 bytes from www.jiangyd.cn (192.168.56.102): icmp_seq=2 ttl=64 time=0.023 ms^C--- bbs.jiangyd.cn ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 999msrtt min/avg/max/mdev = 0.010/0.016/0.023/0.007 msroot@jiangydpc:/etc/bind# ping music.jiangyd.cnPING music.jiangyd.cn (192.168.56.1) 56(84) bytes of data.64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=1 ttl=64 time=0.277 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=2 ttl=64 time=0.355 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=3 ttl=64 time=0.203 ms^C--- music.jiangyd.cn ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1999msrtt min/avg/max/mdev = 0.203/0.278/0.355/0.063 msroot@jiangydpc:/etc/bind# host -t PTR 192.168.56.11.56.168.192.in-addr.arpa domain name pointer music.jiangyd.cn.root@jiangydpc:/etc/bind# host -t PTR 192.168.56.102102.56.168.192.in-addr.arpa domain name pointer dns.jiangyd.cn.102.56.168.192.in-addr.arpa domain name pointer www.jiangyd.cn.102.56.168.192.in-addr.arpa domain name pointer bbs.jiangyd.cn. 泛解析,前面域名可以随便填写了 123456789101112131415161718192021222324252627282930313233root@jiangydpc:/etc/bind# ping wqewweq.ipad.jiangyd.com.cnPING wqewweq.ipad.jiangyd.com.cn (192.168.56.1) 56(84) bytes of data.64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=1 ttl=64 time=0.295 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=2 ttl=64 time=0.358 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=3 ttl=64 time=0.246 ms^C--- wqewweq.ipad.jiangyd.com.cn ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2000msrtt min/avg/max/mdev = 0.246/0.299/0.358/0.050 msroot@jiangydpc:/etc/bind# ping www.ipad.jiangyd.com.cnPING www.ipad.jiangyd.com.cn (192.168.56.1) 56(84) bytes of data.64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=1 ttl=64 time=0.194 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=2 ttl=64 time=0.289 ms^C--- www.ipad.jiangyd.com.cn ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 0.194/0.241/0.289/0.049 msroot@jiangydpc:/etc/bind# ping bbs.ipad.jiangyd.com.cnPING bbs.ipad.jiangyd.com.cn (192.168.56.102) 56(84) bytes of data.64 bytes from bbs.jiangyd.cn (192.168.56.102): icmp_seq=1 ttl=64 time=0.019 ms64 bytes from bbs.jiangyd.cn (192.168.56.102): icmp_seq=2 ttl=64 time=0.030 ms^C--- bbs.ipad.jiangyd.com.cn ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 0.019/0.024/0.030/0.007 msroot@jiangydpc:/etc/bind# ping 56789.ipad.jiangyd.com.cnPING 56789.ipad.jiangyd.com.cn (192.168.56.1) 56(84) bytes of data.64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=1 ttl=64 time=0.343 ms64 bytes from music.jiangyd.cn (192.168.56.1): icmp_seq=2 ttl=64 time=0.306 ms^C--- 56789.ipad.jiangyd.com.cn ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 999msrtt min/avg/max/mdev = 0.306/0.324/0.343/0.025 ms 查看日志我的系统是ubuntu 14.04 1tailf /var/log/syslog bind9 重启，停止，状态,及端口 1234567891011121314151617181920# /etc/init.d/bind9 status * bind9 is runningroot@jiangydpc:/etc/bind# /etc/init.d/bind9 stop * Stopping domain name service... bind9 waiting for pid 4039 to die [ OK ]root@jiangydpc:/etc/bind# /etc/init.d/bind9 start * Starting domain name service... bind9 [ OK ]root@jiangydpc:/etc/bind# /etc/init.d/bind9 restart * Stopping domain name service... bind9 [ OK ] * Starting domain name service... bind9 [ OK ]root@jiangydpc:/etc/bind# netstat -lntpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 192.168.56.102:53 0.0.0.0:* LISTEN 4133/namedtcp 0 0 10.100.3.52:53 0.0.0.0:* LISTEN 4133/namedtcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4133/namedtcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4133/namedtcp 0 0 127.0.0.1:8123 0.0.0.0:* LISTEN 1229/polipotcp 0 0 0.0.0.0:3333 0.0.0.0:* LISTEN 1092/sshdtcp6 0 0 :::53 :::* LISTEN 4133/named]]></content>
      <tags>
        <tag>dns</tag>
        <tag>bind9</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker cp]]></title>
    <url>%2F2018%2F05%2F06%2Fdocker-cp%2F</url>
    <content type="text"><![CDATA[docker cp 使用记录把容器里面的文件，目录拷贝到宿主机 1$docker cp 2f4f188c5d1c:/etc/nginx/conf.d/testing.www.cloudcare.cn.conf nginx_conf/ 1$docker cp 2f4f188c5d1c:/etc/nginx/conf.d/ nginx_conf/]]></content>
      <categories>
        <category>docker常用命令</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>cp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker logs]]></title>
    <url>%2F2018%2F05%2F06%2Fdocker-logs%2F</url>
    <content type="text"><![CDATA[docker logs 使用记录最近常用到容器的这个命令 12345678910111213$ docker logs --helpUsage: docker logs [OPTIONS] CONTAINERFetch the logs of a containerOptions: --details Show extra details provided to logs -f, --follow Follow log output --help Print usage --since string Show logs since timestamp --tail string Number of lines to show from the end of the logs (default &quot;all&quot;) -t, --timestamps Show timestamps 实时查看日志1$ docker logs -f a13d7f1818d6 查看日志产生的时间 12$ docker logs -t a13d7f1818d62018-05-06T08:53:26.689471000Z INFO:callme.server:Server with id=&apos;cloudcare&apos; started. 查看最后多少条日志 1docker logs -f --tail=10 a13d7f1818d6]]></content>
      <categories>
        <category>docker常用命令</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
